Step3:
 Running the compiled program using ./lab2_p1 resulted in a segmentation fault because argv[1] 
being empty I guess means that the program was trying to access memory out side of it's allocated memory.
~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?
Step4:
a. Running the program with a delay of 500 resulted in the child process and parent process alternating 
until each finished. Increasing the delay to 5000 had the parent and child process alternate for some time and then
go out of sync sort of randomly. Based on what we learned, I think this is because the processes cant finish in a 
single time quantum resulting in them getting placed back into ready and then restarted when the CPU decided they should be restarted.

When I redirect stdout to a file they dont alternate. I think because the file can only be accessed by one process at a time.
Using a delay of 500 causes parent to add to the file first and using 5000 results in the child adding to the file first
Makes sense that the increased delay would cause the child process to use the file first
~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?~?


